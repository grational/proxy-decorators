package it.italiaonline.rnd.proxy

import java.net.Proxy.Type
import java.util.regex.Pattern
import java.util.regex.Matcher

/**
 * This Groovy source file was auto generated by 'gigawatt'
 * @author d7392
 * @date 01-08-2018 12.55
 */
class EnvProxy {
	private final String  proxyPattern =
		$/(https?|socks[45])://(?:([^:]+):([^@]+)@)?([^:]+):([1-9][0-9]{0,4})/$
	private final Boolean direct
	private final String  protocol
	private final String  username
	private final String  password
	private final String  host
	private final Integer port

	EnvProxy(String proxyString) {
		if ( proxyString == null )
			this.direct = true
		else if ( ! ( proxyString ==~ proxyPattern ) )
			throw new UnsupportedOperationException("Invalid proxy string '${proxyString}'")
		else {
			Matcher m = (proxyString =~ proxyPattern); m.find()
			this.protocol = m.group(1)
			this.username = m.group(2)
			this.password = m.group(3)
			this.host     = m.group(4)
			this.port     = m.group(5) as Integer
		}
	}

	Proxy.Type type() {
		def type
		if ( this.direct )
			type = Proxy.Type.DIRECT
		else if ( this.protocol ==~ 'https?' )
			type = Proxy.Type.HTTP
		else if ( this.protocol ==~ 'socks[45]' )
			type = Proxy.Type.SOCKS
	}

	String host() {
		if ( this.direct )
			throw new UnsupportedOperationException('Cannot return the proxy host with a direct connection')
		return this.host
	}

	Integer port() {
		if ( this.direct )
			throw new UnsupportedOperationException('Cannot return the proxy port with a direct connection')
		return this.port
	}

	Boolean secure() {
		if ( this.direct )
			throw new UnsupportedOperationException('Cannot return the proxy secure flag with a direct connection')
		return ( this.protocol == 'https' )
	}

	Boolean auth() {
		if ( this.direct )
			throw new UnsupportedOperationException('Cannot return the proxy auth flag with a direct connection')
		return ( this.username && this.password )
	}

	String username() {
		if ( this.direct )
			throw new UnsupportedOperationException('Cannot return the proxy username with a direct connection')
		if ( ! this.auth() )
			throw new UnsupportedOperationException("Cannot return the proxy username, the proxy string doesn't contain any auth credentials")
		return this.username
	}

	String password() {
		if ( this.direct )
			throw new UnsupportedOperationException('Cannot return the proxy password with a direct connection')
		if ( ! this.auth() )
			throw new UnsupportedOperationException("Cannot return the proxy password, the proxy string doesn't contain any auth credentials")
		return this.password
	}
}
